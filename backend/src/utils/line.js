const crypto = require("crypto");
// ‡πÉ‡∏ä‡πâ fetch ‡∏Ç‡∏≠‡∏á Node 18+ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
// ‡∏ñ‡πâ‡∏≤ Node < 18 ‡πÉ‡∏´‡πâ‡∏•‡∏á: npm i node-fetch ‡πÅ‡∏•‡πâ‡∏ß import ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô
const fetch = global.fetch || ((...args) => import("node-fetch").then(({ default: f }) => f(...args)));

const LINE_API = "https://api.line.me/v2/bot/message/push";

/** ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ */
async function pushText(to, text) {
  const token = process.env.LINE_CHANNEL_ACCESS_TOKEN;
  if (!token) throw new Error("Missing LINE_CHANNEL_ACCESS_TOKEN");

  const res = await fetch(LINE_API, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      to,
      messages: [{ type: "text", text }],
    }),
  });

  if (!res.ok) {
    const t = await res.text();
    throw new Error(`LINE push ${res.status}: ${t}`);
  }
}

/** ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Flex ‡∏´‡∏£‡∏∑‡∏≠ message ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ */
async function pushMessage(to, message) {
  const token = process.env.LINE_CHANNEL_ACCESS_TOKEN;
  if (!token) throw new Error("Missing LINE_CHANNEL_ACCESS_TOKEN");

  const res = await fetch(LINE_API, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      to,
      messages: [message], // üü¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö flex message, image, sticker, ‡∏Ø‡∏•‡∏Ø
    }),
  });

  if (!res.ok) {
    const t = await res.text();
    throw new Error(`LINE push ${res.status}: ${t}`);
  }
}

/** verify signature ‡∏à‡∏≤‡∏Å LINE */
function verifyLineSignature(signature, rawBody) {
  const secret = process.env.LINE_CHANNEL_SECRET;
  if (!secret || !signature) return false;
  const mac = crypto.createHmac("sha256", secret).update(rawBody).digest("base64");
  return signature === mac;
}

module.exports = { pushText, pushMessage, verifyLineSignature };
