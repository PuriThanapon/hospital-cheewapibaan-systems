const cron = require("node-cron");
const { pool } = require("../config/db");
const { pushText, pushMessage } = require("../utils/line");

function buildAppointmentFlex(r) {
  return {
    type: "bubble",
    body: {
      type: "box",
      layout: "vertical",
      contents: [
        { type: "text", text: `${r.first_name ?? ""} ${r.last_name ?? ""}`, weight: "bold", size: "lg" },
        { type: "text", text: `HN: ${r.patients_id}`, size: "sm", color: "#888888" },
        { type: "separator", margin: "md" },
        {
          type: "box",
          layout: "vertical",
          margin: "md",
          spacing: "sm",
          contents: [
            { type: "text", text: `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${r.appointment_date}`, size: "sm" },
            { type: "text", text: `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${r.start_time} - ${r.end_time}`, size: "sm" },
            { type: "text", text: `üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${r.place ?? "-"}`, size: "sm" },
            { type: "text", text: `üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${r.note ?? "-"}`, size: "sm" }
          ]
        }
      ]
    }
  };
}

function buildAppointmentsFlex(rows, today) {
  return {
    type: "flex",
    altText: `üìå ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${today} (${rows.length} ‡∏£‡∏≤‡∏¢)`,
    contents: {
      type: "carousel",
      contents: rows.map(buildAppointmentFlex)
    }
  };
}

// üïï ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 06:00
cron.schedule("* 6 * * *", async () => {
  try {
    const today = new Date().toISOString().slice(0, 10);

    const { rows } = await pool.query(
      `SELECT a.appointment_date, a.start_time, a.end_time, a.place, a.note,
              p.patients_id, p.first_name, p.last_name
       FROM appointment a
       JOIN patients p ON a.patients_id = p.patients_id
       WHERE a.appointment_date = $1
       ORDER BY a.start_time ASC`,
      [today]
    );

    const targets = [process.env.LINE_USER_ID, process.env.LINE_GROUP_ID].filter(Boolean);

    for (const target of targets) {
      if (!rows.length) {
        await pushText(target, "üì≠ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢");
        continue;
      }

      const flexMsg = buildAppointmentsFlex(rows, today);
      await pushMessage(target, flexMsg);

      await pushText(target, `‚úÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${rows.length} ‡∏£‡∏≤‡∏¢`);
    }

    console.log("‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Flex + ‡∏™‡∏£‡∏∏‡∏õ)");
  } catch (err) {
    console.error("‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
  }
});
