const cron = require("node-cron");
const { pool } = require("../config/db");
const { pushText, pushMessage } = require("../utils/line");

function todayISOInTH() {
  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "YYYY-MM-DD" ‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
  return new Intl.DateTimeFormat("en-CA", {
    timeZone: "Asia/Bangkok",
    year: "numeric", month: "2-digit", day: "2-digit",
  }).format(new Date());
}

function formatTime(t) {
    if (!t) return "-";
    return t.toString().slice(0, 5) + " ‡∏ô."; // HH:mm ‡∏ô.
}

function toLocalDate(value) {
    if (!value) return null;

    if (value instanceof Date && !isNaN(value)) return value;

    const s = String(value);

    // YYYY-MM-DD
    if (/^\d{4}-\d{2}-\d{2}$/.test(s)) {
        const [y, m, d] = s.split("-").map(n => parseInt(n, 10));
        return new Date(y, m - 1, d);
    }

    // YYYY-MM-DDTHH:mm:ss...  -> ‡∏ï‡∏±‡∏î‡πÄ‡∏≠‡∏≤ 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    if (/^\d{4}-\d{2}-\d{2}T/.test(s)) {
        const [y, m, d] = s.slice(0, 10).split("-").map(n => parseInt(n, 10));
        return new Date(y, m - 1, d);
    }

    // DD/MM/YYYY
    if (/^\d{2}\/\d{2}\/\d{4}$/.test(s)) {
        const [d, m, y] = s.split("/").map(n => parseInt(n, 10));
        return new Date(y, m - 1, d);
    }

    // ‡∏ü‡∏≠‡∏•‡πÅ‡∏ö‡πá‡∏Å: ‡πÉ‡∏´‡πâ Date ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse
    const d2 = new Date(s);
    if (!isNaN(d2)) return d2;

    return null;
}

function formatDateTHFull(dateInput) {
    const date = toLocalDate(dateInput);
    if (!date) return "-";

    const daysTH = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"];
    const monthsTH = ["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"];

    const weekday = daysTH[date.getDay()];
    const day = date.getDate();
    const monthName = monthsTH[date.getMonth()];
    const buddhistYr = date.getFullYear() + 543;

    return `‡∏ß‡∏±‡∏ô${weekday} ‡∏ó‡∏µ‡πà ${day} ${monthName} ‡∏û.‡∏®.${buddhistYr}`;
}



function getOverallTimeRange(rows) {
    if (!rows.length) return null;
    const startTimes = rows.map(r => r.start_time).filter(Boolean).sort();
    const endTimes = rows.map(r => r.end_time).filter(Boolean).sort();
    return {
        earliest: formatTime(startTimes[0]),
        latest: formatTime(endTimes[endTimes.length - 1])
    };
}


function buildAppointmentFlex(r) {
    return {
        type: "bubble",
        body: {
            type: "box",
            layout: "vertical",
            contents: [
                { type: "text", text: `${r.first_name ?? ""} ${r.last_name ?? ""}`, weight: "bold", size: "lg" },
                { type: "text", text: `HN: ${r.patients_id}`, size: "sm", color: "#888888" },
                { type: "separator", margin: "md" },
                {
                    type: "box",
                    layout: "vertical",
                    margin: "md",
                    spacing: "sm",
                    contents: [
                        { type: "text", text: `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatDateTHFull(r.appointment_date)}`, size: "sm" },

                        { type: "text", text: `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${formatTime(r.start_time)} - ${formatTime(r.end_time)}`, size: "sm" },
                        { type: "text", text: `üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${r.place ?? "-"}`, size: "sm" },
                        { type: "text", text: `üìç ‡πÅ‡∏ú‡∏ô‡∏Å: ${r.department ?? "-"}`, size: "sm" },
                        { type: "text", text: `üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${r.note ?? "-"}`, size: "sm" }
                    ]
                }
            ]
        }
    };
}


function buildAppointmentsFlex(rows, label) {
    return {
        type: "flex",
        altText: `üìå ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥${label} (${rows.length} ‡∏£‡∏≤‡∏¢)`,
        contents: {
            type: "carousel",
            contents: rows.map(buildAppointmentFlex)
        }
    };
}

// üïï ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 06:00
cron.schedule("0 6 * * *", async () => {
    try {
       const today = todayISOInTH(); 

        const { rows } = await pool.query(
            `SELECT a.appointment_date, a.start_time, a.end_time, a.place, a.note, a.department,
              p.patients_id, p.first_name, p.last_name
       FROM appointment a
       JOIN patients p ON a.patients_id = p.patients_id
       WHERE a.appointment_date = $1
       ORDER BY a.start_time ASC`,
            [today]
        );

        const targets = [process.env.LINE_USER_ID, process.env.LINE_GROUP_ID].filter(Boolean);

        for (const target of targets) {
            if (!rows.length) {
                await pushText(target, "üì≠ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢");
                continue;
            }
            
            const dateLabel = formatDateTHFull(today); // ‚úÖ "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£ ‡∏ó‡∏µ‡πà 27 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° ‡∏û.‡∏®.2568"

            const flexMsg = buildAppointmentsFlex(rows, dateLabel);
            await pushMessage(target, flexMsg);

            const range = getOverallTimeRange(rows);
            await pushText(
                target,
                `‚úÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (${dateLabel}) ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${rows.length} ‡∏£‡∏≤‡∏¢\nüïë ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ß‡∏•‡∏≤ ${range.earliest} ‡∏ñ‡∏∂‡∏á ${range.latest}`
            );



        }

        console.log("‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Flex + ‡∏™‡∏£‡∏∏‡∏õ)");
    } catch (err) {
        console.error("‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    }
});
