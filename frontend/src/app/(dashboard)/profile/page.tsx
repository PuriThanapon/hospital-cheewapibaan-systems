'use client';
import React, { useEffect, useMemo, useRef, useState } from 'react';
import styles from './page.module.css';

// ------------------------------------------------------------
// Types
// ------------------------------------------------------------
type UserProfile = {
  id: string;
  name: string;
  role: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' | '‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•' | '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' | '‡πÅ‡∏û‡∏ó‡∏¢‡πå' | '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
  email: string;
  phone?: string;
  department?: string;
  about?: string;
  avatarUrl?: string; // remote url
};

type FormErrors = Partial<Record<keyof UserProfile, string>> & { password?: string };

// ------------------------------------------------------------
// Page Component
// ------------------------------------------------------------
export default function ProfilePage() {
  // ‚ö†Ô∏è ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà initialProfile ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô fetch ‡∏à‡∏≤‡∏Å API ‡πÉ‡∏ô useEffect)
  const initialProfile: UserProfile = useMemo(
    () => ({
      id: 'u_001',
      name: 'Phuthanet Sitthiwichai',
      role: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
      email: 'admin@example.com',
      phone: '08x-xxx-xxxx',
      department: '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ä‡∏µ‡∏ß‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•',
      about: '‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô',
      avatarUrl:
        'https://scontent.fbkk12-3.fna.fbcdn.net/v/t39.30808-1/462507050_4069822256579766_3251004265784467628_n.jpg?stp=dst-jpg_s200x200_tt6&_nc_cat=102&ccb=1-7&_nc_sid=e99d92&_nc_ohc=ErJqVZMN420Q7kNvwHQ7ESj&_nc_oc=AdkJr_Y9WBSl5BSR7Mn4mh9vfvCWtCuhWF141ATN0QkZeZG-q-t1r_dj7_-hQrO9-v7IKD_AamaWX5SD5YBvqBDh&_nc_zt=24&_nc_ht=scontent.fbkk12-3.fna&_nc_gid=AotkxksVEWFUWH-xe---DA&oh=00_AfXdXPJgV3NfUEaV7ya_-clke_7xm4zVjTOBXDjUlCIEig&oe=68A4349A',
    }),
    []
  );

  const [form, setForm] = useState<UserProfile>(initialProfile);
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [avatarPreview, setAvatarPreview] = useState<string | undefined>(undefined);
  const [saving, setSaving] = useState(false);
  const [saved, setSaved] = useState(false);
  const [errors, setErrors] = useState<FormErrors>({});
  const [changePwOpen, setChangePwOpen] = useState(false);

  const fileInputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    if (!avatarFile) return;
    const url = URL.createObjectURL(avatarFile);
    setAvatarPreview(url);
    return () => URL.revokeObjectURL(url);
  }, [avatarFile]);

  function validate(f: UserProfile): FormErrors {
    const e: FormErrors = {};
    if (!f.name?.trim()) e.name = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
    if (!f.email?.trim()) e.email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
    else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(f.email)) e.email = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    if (f.phone && !/^[0-9+\-\s]{6,}$/.test(f.phone)) e.phone = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    return e;
  }

  async function handleSave() {
    const v = validate(form);
    setErrors(v);
    if (Object.keys(v).length > 0) return;

    setSaving(true);
    setSaved(false);

    try {
      // 1) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà -> ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend/Storage ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ avatarUrl ‡πÉ‡∏´‡∏°‡πà
      // const avatarUrl = avatarFile ? await uploadAvatar(avatarFile) : form.avatarUrl;

      // 2) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡πÑ‡∏õ API
      // await fetch('/api/profile', { method: 'PUT', body: JSON.stringify({ ...form, avatarUrl }) })

      await new Promise((r) => setTimeout(r, 500)); // mock
      setSaved(true);
    } catch (err) {
      console.error(err);
    } finally {
      setSaving(false);
      setTimeout(() => setSaved(false), 2000);
    }
  }

  function handleSignOut() {
    // TODO: ‡∏ß‡∏≤‡∏á logic ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    alert('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)');
  }

  function handleDeleteAccount() {
    if (!confirm('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;
    // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    alert('‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)');
  }

  return (
    <div className={styles.page}>
      <div className={styles.wrapper}>
        {/* Header */}
        <div className={styles.header}>
          <div>
            <h1 className={styles.title}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h1>
            <p className={styles.subtitle}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
          </div>
          <div className={styles.headerActions}>
            <button onClick={() => setChangePwOpen(true)} className={styles.btnSecondary}>
              ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            </button>
            <button onClick={handleSave} disabled={saving} className={styles.btnPrimary}>
              {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‚Ä¶' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á'}
            </button>
          </div>
        </div>

        {/* Top section: Avatar + Basic Info */}
        <div className={styles.grid3}>
          {/* Avatar Card */}
          <div className={styles.card}>
            <div className={styles.avatarRow}>
              <div className={styles.avatar}>
                <img
                  src={avatarPreview || form.avatarUrl || '/user.png'}
                  alt="avatar"
                  className={styles.avatarImg}
                />
                {/* Upload button */}
                <button
                  onClick={() => fileInputRef.current?.click()}
                  className={styles.avatarUploadBtn}
                >
                  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ
                </button>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  className={styles.hiddenInput}
                  onChange={(e) => {
                    const f = e.target.files?.[0] || null;
                    setAvatarFile(f);
                  }}
                />
              </div>

              <div className={styles.basicInfo}>
                <div className={styles.name} title={form.name}>{form.name}</div>
                <div className={styles.role}>{form.role}</div>
                {form.department && (
                  <div className={styles.deptBadge}>
                    <span>üè•</span> {form.department}
                  </div>
                )}
              </div>
            </div>

            <p className={styles.about}>{form.about || '‚Äî'}</p>
          </div>

          {/* Basic Info Form */}
          <div className={`${styles.card} ${styles.colSpan2}`}>
            <div className={styles.formGrid}>
              <Field label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" error={errors.name}>
                <input
                  value={form.name}
                  onChange={(e) => setForm({ ...form, name: e.target.value })}
                  className={styles.input}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ"
                />
              </Field>

              <Field label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•" error={errors.email}>
                <input
                  type="email"
                  value={form.email}
                  onChange={(e) => setForm({ ...form, email: e.target.value })}
                  className={styles.input}
                  placeholder="you@example.com"
                />
              </Field>

              <Field label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" error={errors.phone}>
                <input
                  value={form.phone || ''}
                  onChange={(e) => setForm({ ...form, phone: e.target.value })}
                  className={styles.input}
                  placeholder="08x-xxx-xxxx"
                />
              </Field>

              <Field label="‡πÅ‡∏ú‡∏ô‡∏Å/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô">
                <input
                  value={form.department || ''}
                  onChange={(e) => setForm({ ...form, department: e.target.value })}
                  className={styles.input}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ä‡∏µ‡∏ß‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•"
                />
              </Field>

              <Field label="‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô" full>
                <textarea
                  value={form.about || ''}
                  onChange={(e) => setForm({ ...form, about: e.target.value })}
                  className={`${styles.input} ${styles.textarea}`}
                  placeholder="‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠"
                />
              </Field>
            </div>
          </div>
        </div>

        {/* Account & Security */}
        <div className={styles.grid3}>
          <div className={styles.card}>
            <SectionTitle>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</SectionTitle>
            <ul className={styles.securityList}>
              <li className={styles.securityItem}>
                <span>‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•</span>
                <span className={`${styles.pill} ${styles.pillSuccess}`}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
              </li>
              <li className={styles.securityItem}>
                <span>‡πÄ‡∏õ‡∏¥‡∏î 2FA</span>
                <span className={`${styles.pill}`}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î</span>
              </li>
              <li className={styles.securityFooter}>
                <button
                  onClick={() => setChangePwOpen(true)}
                  className={styles.linkBrand}
                >
                  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                </button>
              </li>
            </ul>
          </div>

          <div className={`${styles.card} ${styles.colSpan2}`}>
            <SectionTitle>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</SectionTitle>
            <div className={styles.devices}>
              {[
                { os: 'Windows 10 ¬∑ Chrome', ip: '183.88.***.***', when: '2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß', current: true },
                { os: 'iPhone ¬∑ Safari', ip: '49.49.***.***', when: '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ 14:21', current: false },
              ].map((it, idx) => (
                <div key={idx} className={styles.deviceItem}>
                  <div>
                    <div className={styles.deviceTitle}>{it.os}</div>
                    <div className={styles.deviceSub}>IP: {it.ip}</div>
                  </div>
                  <div className={styles.deviceActions}>
                    {it.current && (
                      <span className={`${styles.pill} ${styles.pillSuccess}`}>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
                    )}
                    <button className={styles.btnTextDanger}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Danger Zone */}
        <div className={styles.card}>
          <SectionTitle>‡πÄ‡∏Ç‡∏ï‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢</SectionTitle>
          <div className={styles.dangerRow}>
            <div className={styles.dangerText}>
              ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
            </div>
            <div className={styles.btnGroup}>
              <button onClick={handleSignOut} className={styles.btnSecondary}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
              <button onClick={handleDeleteAccount} className={styles.btnDanger}>‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</button>
            </div>
          </div>
        </div>
      </div>

      {/* Toast */}
      <div className={`${styles.toast} ${saved ? styles.toastVisible : styles.toastHidden}`}>
        <div className={styles.toastBox}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</div>
      </div>

      {/* Change Password Modal */}
      {changePwOpen && (
        <ChangePasswordModal onClose={() => setChangePwOpen(false)} onSaved={() => setChangePwOpen(false)} />
      )}
    </div>
  );
}

// ------------------------------------------------------------
// Sub Components
// ------------------------------------------------------------
function SectionTitle({ children }: { children: React.ReactNode }) {
  return <h2 className={styles.sectionTitle}>{children}</h2>;
}

function Field({
  label,
  error,
  children,
  full,
}: {
  label: string;
  error?: string;
  children: React.ReactNode;
  full?: boolean;
}) {
  return (
    <label className={`${styles.field} ${full ? styles.full : ''}`}>
      <span className={styles.label}>{label}</span>
      {children}
      {error && <span className={styles.error}>{error}</span>}
    </label>
  );
}

function ChangePasswordModal({ onClose, onSaved }: { onClose: () => void; onSaved: () => void }) {
  const [current, setCurrent] = useState('');
  const [pw1, setPw1] = useState('');
  const [pw2, setPw2] = useState('');
  const [err, setErr] = useState<string | null>(null);
  const [saving, setSaving] = useState(false);
  const panelRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const onKey = (e: KeyboardEvent) => e.key === 'Escape' && onClose();
    const onClick = (e: MouseEvent) => {
      if (!panelRef.current) return;
      const t = e.target as Node;
      if (!panelRef.current.contains(t)) onClose();
    };
    document.addEventListener('keydown', onKey);
    document.addEventListener('mousedown', onClick);
    return () => {
      document.removeEventListener('keydown', onKey);
      document.removeEventListener('mousedown', onClick);
    };
  }, [onClose]);

  function validate() {
    if (!current.trim() || !pw1.trim() || !pw2.trim()) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö';
    if (pw1.length < 8) return '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
    if (pw1 !== pw2) return '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô';
    return null;
  }

  async function submit() {
    const v = validate();
    setErr(v);
    if (v) return;
    setSaving(true);
    try {
      // await fetch('/api/change-password', { method: 'POST', body: JSON.stringify({ current, pw1 }) })
      await new Promise((r) => setTimeout(r, 500));
      onSaved();
      alert('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    } catch (e) {
      setErr('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className={styles.modalOverlay}>
      <div ref={panelRef} className={styles.modalPanel}>
        <h3 className={styles.modalTitle}>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h3>
        <p className={styles.modalDesc}>‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</p>

        <div className={styles.modalFields}>
          <label className={styles.field}>
            <span className={styles.label}>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
            <input type="password" value={current} onChange={(e) => setCurrent(e.target.value)} className={styles.input} />
          </label>
          <label className={styles.field}>
            <span className={styles.label}>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</span>
            <input type="password" value={pw1} onChange={(e) => setPw1(e.target.value)} className={styles.input} />
          </label>
          <label className={styles.field}>
            <span className={styles.label}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</span>
            <input type="password" value={pw2} onChange={(e) => setPw2(e.target.value)} className={styles.input} />
          </label>
          {err && <div className={styles.error}>{err}</div>}
        </div>

        <div className={styles.modalActions}>
          <button onClick={onClose} className={styles.btnSecondary}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          <button onClick={submit} disabled={saving} className={styles.btnBrand}>
            {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‚Ä¶' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
          </button>
        </div>
      </div>
    </div>
  );
}